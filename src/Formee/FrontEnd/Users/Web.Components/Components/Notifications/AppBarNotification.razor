@inject NotificationsService _notificationsService
@inject AppStateService _appState

@implements IDisposable

<div class="fm-notification__container">
    @if (_appState.Notifications.NotificationsCollection is not null)
    {
        <SfTooltip Position="Syncfusion.Blazor.Popups.Position.BottomCenter"
                   Content="My Notifications">
            <SfIcon IconCss="fa-solid fa-bell"
                    class="fm-sidebar__icon"
                    @onclick="HandleButtonClick">
                <span class="e-badge e-badge-success e-badge-notification e-badge-overlap">
                    @_appState.Notifications.NotificationsCollection.Count(n => n.IsRead == false)
                </span>
            </SfIcon>
        </SfTooltip>
    }

    <div class="fm-notification__modal @ModalVisibility">
        <div class="d-flex justify-content-between align-items-center">
            <p>My Notifications</p>

            <SfButton IconCss="fa-solid fa-bell"
                      CssClass="e-link">
                Mark All as Read
            </SfButton>
        </div>

        <FmSeperator />

        <div class="fm-notification__list-view">
            @if (_appState.Notifications.NotificationsCollection is not null
            && _appState.Notifications.IsFetching != true)
            {
                foreach (var notification in _appState.Notifications.NotificationsCollection)
                {
                    var last = _appState.Notifications.NotificationsCollection.LastOrDefault();

                    <NotificationModalItem Notification="notification"
                                   OnMarkAsRead="HandleMarkAsRead" />

                    if (notification != last)
                    {
                        <FmSpacer />
                    }
                }
            }
            else
            {
                <p>There are no notifications yet!</p>
            }
        </div>

        <FmSeperator />

        <div class="fm-notification__view-all-button">
            <SfButton IconCss="fa-solid fa-bell"
                      CssClass="e-link">
                View All
            </SfButton>
        </div>
    </div>
</div>

@code {
    private bool IsVisible { get; set; } = false;

    private string ModalVisibility =>
        IsVisible ? "fm-notification__modal-show" : "fm-notification__modal-hidden";

    protected override async Task OnParametersSetAsync()
    {
        _appState.Notifications.StateChanged += StateHasChanged;
        
        await _notificationsService.CreateClientConnection();

        await _notificationsService.GetAllByUserIdAsync(_appState.Identity.User.Id, 5);

        _notificationsService.ListenToMarkAsRead();
    }

    private async Task HandleMarkAsRead(int id)
    {
        await _notificationsService.MarkNotificationAsReadAsync(id);
    }

    private void HandleButtonClick()
    {
        IsVisible = !IsVisible;
        StateHasChanged();
    }

    public void Dispose()
    {
        _appState.Notifications.StateChanged -= StateHasChanged;
    }
}