@page "/subscriptions"

@inject IConfiguration Configuration
@inject HttpClient HttpClient

<div class="d-flex justify-content-between align-items-center">
    <h3>All Active Subscriptions</h3>

    <a class="btn btn-primary" href="/subscriptions/upsert?subscription_id=0&upsert_type=create">
        Create
    </a>

</div>

@if (!_isFetching)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Annual Price</th>
                <th>Is Default</th>
                <th>Created Data</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (_subscriptions is not null)
            {
                @foreach (var subscription in _subscriptions)
                {
                    <tr>
                        <td>@subscription.Name</td>
                        <td>@subscription.Price</td>
                        <td>@subscription.AnnualPrice</td>
                        <td>@subscription.IsDefault</td>
                        <td>@subscription.CreatedDate.ToString("f")</td>
                        <td>
                            <div class="btn-group">
                                <a class="btn btn-success"
                                   href="@($"/subscriptions/upsert?subscription_id={subscription.Id}&upsert_type=edit")">
                                    Edit
                                </a>
                                <a class="btn btn-danger"
                                   href="@($"/subscriptions/upsert?subscription_id={subscription.Id}&upsert_type=delete")">
                                    Delete
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <div class="spinner-border"></div>
}

@code {
    private List<SubscriptionDto>? _subscriptions;
    private bool _isFetching;

    /// <summary>
    /// On page load configure the HTTP client and page data
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        var baseUrl = new Uri(Configuration.GetValue<string>("GatewayUrl"));

        HttpClient.BaseAddress = baseUrl;

        await GetAllSubscriptionsAsync();
    }

    /// <summary>
    /// Fetch all subscriptions from
    /// </summary>
    /// <returns></returns>
    private async Task GetAllSubscriptionsAsync()
    {
        _isFetching = true;

        _subscriptions = await HttpClient
            .GetFromJsonAsync<List<SubscriptionDto>>("/gateway/subscriptions/all");

        _isFetching = false;
    }
}
