@page "/subscriptions"

@inject IConfiguration Configuration
@inject HttpClient HttpClient

<div class="d-flex justify-content-between align-items-center">
    <h3>All Active Subscriptions</h3>

    <a class="btn btn-primary" href="/subscriptions/upsert?subscription_id=0&upsert_type=create">
        Create
    </a>

</div>

@if (!_isFetching)
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Annual Price</th>
            <th>Is Default</th>
            <th>Created Data</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @if (_subscriptionsCollection is not null)
        {
            @foreach (var subscription in _subscriptionsCollection)
            {
                <tr>
                    <td>@subscription.Name</td>
                    <td>@subscription.Price</td>
                    <td>@subscription.AnnualPrice</td>
                    <td>@subscription.IsDefault</td>
                    <td>@subscription.CreatedDate.ToString("f")</td>
                    <td>
                        <div class="btn-group">
                            <a class="btn btn-success"
                               href="@($"/coupons/upsert?coupon_id={subscription.Id}&upsert_type=edit")">
                                Edit
                            </a>
                            <a class="btn btn-danger"
                               href="@($"/coupons/upsert?coupon_id={subscription.Id}&upsert_type=delete")">
                                Delete
                            </a>
                        </div>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td>----</td>
                <td>----</td>
                <td>----</td>
                <td>----</td>
                <td>----</td>
                <td>----</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div class="spinner-border"></div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private List<SubscriptionDto>? _subscriptionsCollection;
    private bool _isFetching;

    /// <summary>
    /// On page load configure the HTTP client and page data
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        var baseUrl = new Uri(Configuration.GetValue<string>("GatewayUrl"));

        HttpClient.BaseAddress = baseUrl;

        var authState = await AuthenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {

            const string typeName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";

            var authId = authState.User
                .Claims
                .FirstOrDefault(c => c.Type == typeName)
                ?.Value;

            var accessToken = await HttpClient
                .GetFromJsonAsync<string>($"/gateway/identity/users/{authId}");

            HttpClient.DefaultRequestHeaders.Authorization = new
                AuthenticationHeaderValue("Bearer", accessToken);

            await GetAllSubscriptionsAsync();
        }
        
    }

    /// <summary>
    /// Fetch all coupons active
    /// </summary>
    /// <returns></returns>
    private async Task GetAllSubscriptionsAsync()
    {
        _isFetching = true;

        var response = await HttpClient
            .GetAsync("/gateway/subscriptions/all");

        if (response.IsSuccessStatusCode)
            _subscriptionsCollection = await response.Content
                .ReadFromJsonAsync<List<SubscriptionDto>>();
    
        _isFetching = false;
    }
}
