@inject NotificationsService NotificationsService
@inject AppStateService AppStateService

@implements IDisposable

<div class="fm-notification__container">
    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.BottomCenter"
               Content="My Notifications">
        <SfIcon IconCss="fa-solid fa-bell"
                class="fm-sidebar__icon"
                @onclick="HandleButtonClick">
            <span class="e-badge e-badge-success e-badge-notification e-badge-overlap">
                @NotificationsService.UnreadNotificationsCount
            </span>
        </SfIcon>
    </SfTooltip>

    <div class="fm-notification__modal @ModalVisibility">
        <div class="d-flex justify-content-between align-items-center">
            <p>My Notifications</p>

            <SfButton IconCss="fa-solid fa-bell"
                      CssClass="e-link">
                Mark All as Read
            </SfButton>
        </div>

        <FmSeperator />

        <div class="fm-notification__list-view">
            @if (NotificationsService.Notifications is not null
            && NotificationsService.IsFetching != true)
            {
                foreach (var notification in NotificationsService.Notifications)
                {
                    var last = NotificationsService.Notifications.LastOrDefault();

                    <NotificationModalItem Notification="notification"
                                   OnMarkAsRead="HandleMarkAsRead" />

                    if (notification != last)
                    {
                        <FmSpacer />
                    }
                }
            }
            else
            {
                <p>There are no notifications yet!</p>
            }
        </div>

        <FmSeperator />

        <div class="fm-notification__view-all-button">
            <SfButton IconCss="fa-solid fa-bell"
                      CssClass="e-link">
                View All
            </SfButton>
        </div>
    </div>
</div>

@code {
    private bool IsVisible { get; set; } = false;

    private string ModalVisibility =>
        IsVisible ? "fm-notification__modal-show" : "fm-notification__modal-hidden";

    protected override async Task OnParametersSetAsync()
    {
        await NotificationsService.CreateClientConnection();

        await NotificationsService.GetAllByUserIdAsync(AppStateService.User.Id, 5);

        NotificationsService.ListenToMarkAsRead();

        NotificationsService.StateChanged += async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    private async Task HandleMarkAsRead(int id)
    {
        await NotificationsService.MarkNotificationAsReadAsync(id);
    }

    private void HandleButtonClick()
    {
        IsVisible = !IsVisible;
        StateHasChanged();
    }

    public void Dispose()
    {
        NotificationsService.StateChanged -= StateHasChanged;
    }
}